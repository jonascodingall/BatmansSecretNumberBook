// <auto-generated />
using BatmansSecretNumberBook.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BatmansSecretNumberBook.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240124123707_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BatmansSecretNumberBook.Models.Kontakt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Kontakte");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BatmansSecretNumberBook.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nachname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vorname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Personen");
                });

            modelBuilder.Entity("BatmansSecretNumberBook.Models.KontaktBusiness", b =>
                {
                    b.HasBaseType("BatmansSecretNumberBook.Models.Kontakt");

                    b.Property<string>("Geschäftsnummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("KontaktBusiness", (string)null);
                });

            modelBuilder.Entity("BatmansSecretNumberBook.Models.KontaktPrivat", b =>
                {
                    b.HasBaseType("BatmansSecretNumberBook.Models.Kontakt");

                    b.Property<string>("Lieblingsheld")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefonnummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("KontaktPrivat", (string)null);
                });

            modelBuilder.Entity("BatmansSecretNumberBook.Models.Kontakt", b =>
                {
                    b.HasOne("BatmansSecretNumberBook.Models.Person", "Person")
                        .WithMany("Kontakte")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("BatmansSecretNumberBook.Models.KontaktBusiness", b =>
                {
                    b.HasOne("BatmansSecretNumberBook.Models.Kontakt", null)
                        .WithOne()
                        .HasForeignKey("BatmansSecretNumberBook.Models.KontaktBusiness", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BatmansSecretNumberBook.Models.KontaktPrivat", b =>
                {
                    b.HasOne("BatmansSecretNumberBook.Models.Kontakt", null)
                        .WithOne()
                        .HasForeignKey("BatmansSecretNumberBook.Models.KontaktPrivat", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BatmansSecretNumberBook.Models.Person", b =>
                {
                    b.Navigation("Kontakte");
                });
#pragma warning restore 612, 618
        }
    }
}
